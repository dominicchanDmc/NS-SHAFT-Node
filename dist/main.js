(function(){"use strict";var __webpack_modules__={755:function(){eval('\n;// CONCATENATED MODULE: ./src/script/player.js\n//const maxLife = 3;\n\nclass PlayerObj {\n  constructor() {\n    this.x = 200;\n    this.y = 300;\n    this.width = 40;\n    this.height = 40;\n    this.speed = 200;\n    this.life = 3;\n    this.stair = 0;\n    this.state = 0;\n    this.color = \'#FF8000\';\n  }\n}\n/* harmony default export */ var player = (PlayerObj);\n;// CONCATENATED MODULE: ./src/script/block.js\nclass BlockObj {\n  constructor(a, b) {\n    this.x = a;\n    this.y = b;\n    this.width = 150;\n    this.height = 30;\n    this.mod = 0;\n    this.color = \'#198e99\';\n  }\n}\n/* harmony default export */ var block = (BlockObj);\n;// CONCATENATED MODULE: ./src/script/j_Block.js\nclass J_BlockObj {\n  constructor(a, b) {\n    this.x = a;\n    this.y = b;\n    this.width = 150;\n    this.height = 30;\n    this.mod = 3;\n    this.color = \'#FFFF00\';\n  }\n}\n;\n/* harmony default export */ var j_Block = (J_BlockObj);\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n//--------param\nconst statusSt = \'Start\';\nconst bgpic = new Image();\nbgpic.src = "./assets/bg.jpg";\nconst toppic = new Image();\ntoppic.src = "./assets/top.jpg";\nconst stand = new Image();\nstand.src = "./assets/1.png";\nconst blockPic = new Image();\nblockPic.src = "./assets/block.jpg";\nconst j_blockPic = new Image();\nj_blockPic.src = "./assets/jblock.jpg";\nconst leftpic = new Image();\nleftpic.src = "./assets/left.png";\nconst rightpic = new Image();\nrightpic.src = "./assets/right.png";\nlet canvasB, ctxB, canvasM, ctxM;\nlet gameStatus = statusSt;\nlet src_player = new player();\nlet keysDown = {};\nlet speed = 7;\nlet up = 0,\n  up2 = 0;\nlet down = 1,\n  down2 = 1;\nlet m_y = 0,\n  m_y2 = 0,\n  flag3 = 0;\nlet ms = 250;\n//-------------------------\nfunction render() {\n  canvasB = document.getElementById(\'canvasBoard\');\n  ctxB = canvasB.getContext(\'2d\');\n  canvasM = document.getElementById(\'canvasMove\');\n  ctxM = canvasM.getContext(\'2d\');\n  canvasB.width = 480;\n  canvasB.height = 740;\n  canvasM.width = 480;\n  canvasM.height = 300;\n  window.addEventListener(\'keydown\', function (e) {\n    keysDown[e.keyCode] = true;\n  });\n  window.addEventListener(\'keyup\', function (e) {\n    delete keysDown[e.keyCode];\n  });\n  /////move by touch\n  canvasB.addEventListener("touchstart", function (e) {\n    touches = e.touches[0];\n    tou = 1;\n  });\n  canvasB.addEventListener("touchmove", function (e) {\n    var t = e.touches[0];\n    if (t.pageX < touches.pageX && src_player.x > 0 && src_player.x < 560) {\n      src_player.x -= src_player.speed * 0.015;\n      src_player.state = 1;\n      if (src_player.x <= 0) src_player.x = 1;\n    } else if (t.pageX > touches.pageX && src_player.x > 0 && src_player.x < 560) {\n      src_player.x += src_player.speed * 0.015;\n      src_player.state = 2;\n      if (src_player.x >= 560) src_player.x = canvasB.width - 41;\n    } else src_player.state = 0;\n    //alert(touches.pageX);\n  });\n  if (gameStatus == statusSt) {\n    ctxB.drawImage(bgpic, 0, 0, canvasB.width, canvasB.height);\n    if (src_player.state == 0) ctxB.drawImage(stand, src_player.x, src_player.y, src_player.width, src_player.height);else if (src_player.state == 1) {\n      ctxB.drawImage(leftpic, a, 0, src_player.width, src_player.height, src_player.x, src_player.y, src_player.width, src_player.height);\n      a += 50;\n      if (a >= 200) a = 0;\n    } else if (src_player.state == 2) {\n      ctxB.drawImage(rightpic, b, 0, src_player.width, src_player.height, src_player.x, src_player.y, src_player.width, src_player.height);\n      b += 50;\n      if (b >= 200) b = 0;\n    }\n    ctxB.drawImage(toppic, 0, 0, canvasB.width, 40);\n    for (let i = 0; i < 10; i++) {\n      if (src_Array[i].mod == 0) ctxB.drawImage(blockPic, src_Array[i].x, src_Array[i].y, src_Array[i].width, src_Array[i].height);else if (src_Array[i].mod == 1) ctxB.drawImage(spic, src_Array[i].x, src_Array[i].y, src_Array[i].width, src_Array[i].height);else if (src_Array[i].mod == 2) ctxB.drawImage(kpic, src_Array[i].x, src_Array[i].y, src_Array[i].width, src_Array[i].height);else if (src_Array[i].mod == 3) ctxB.drawImage(j_blockPic, src_Array[i].x, src_Array[i].y, src_Array[i].width, src_Array[i].height);else {\n        ctxB.fillStyle = src_Array[i].color;\n        ctxB.fillRect(src_Array[i].x, src_Array[i].y, src_Array[i].width, src_Array[i].height);\n      }\n    }\n  }\n}\nfunction update(mod) {\n  // if(game == 1){\n  if (37 in keysDown && src_player.x >= 0 && src_player.x < canvas.width - 40) {\n    src_player.x -= src_player.speed * mod;\n    src_player.state = 1;\n    if (src_player.x <= 0) src_player.x = 1;\n  } else if (39 in keysDown && src_player.x >= 0 && src_player.x < canvas.width - 40) {\n    src_player.x += src_player.speed * mod;\n    src_player.state = 2;\n    if (src_player.x >= canvas.width - 40) src_player.x = canvas.width - 41;\n  }\n  for (let i = 0; i < 10; i++) {\n    src_Array[i].y -= speed;\n  }\n  for (let i = 0; i < 10; i++) {\n    if (src_player.y <= src_Array[i].y && src_player.y >= src_Array[i].y - 40 && src_player.x > src_Array[i].x - 20 && src_player.x < src_Array[i].x + 150) {\n      up = 1;\n      m_y = i;\n      break;\n    } else up = 0;\n  }\n  if (up == 1) {\n    src_player.y = src_Array[m_y].y - 40;\n    if (src_Array[m_y].mod == 1) {\n      if (flag == 0 && src_player.life < fulllife) src_player.life++;\n      flag = 1;\n      src_player.speed = ms / 3;\n    } else if (src_Array[m_y].mod == 2) {\n      if (flag == 0) src_player.life -= 5;\n      flag = 1;\n      src_player.speed = ms;\n    } else if (src_Array[m_y].mod == 3) {\n      if (flag == 0 && src_player.life < fulllife) src_player.life++;\n      src_player.speed = ms * 1.5;\n      src_player.y -= 100;\n      flag = 1;\n    } else {\n      if (flag == 0 && src_player.life < fulllife) src_player.life++;\n      src_player.speed = ms;\n      flag = 1;\n    }\n  } else {\n    if (src_player.y < 35) {\n      src_player.life -= 5;\n      src_player.y = 35;\n    }\n    src_player.y += 10;\n    src_player.speed = ms;\n    flag = 0;\n  }\n  if (src_player.y > canvas.height || src_player.life <= 0) {\n    game = 0;\n    end = 1;\n  }\n  //console.log(flag+"  "+player.life + "   " + player.speed);\n  if (src_player.stair > 95) speed = 15;else if (src_player.stair > 80) speed = 14;else if (src_player.stair > 65) speed = 12;else if (src_player.stair > 50) speed = 10;else if (src_player.stair > 35) speed = 9;else if (src_player.stair > 20) speed = 8;\n  for (i = 0; i < 10; i++) {\n    if (src_Array[i].y <= 30) {\n      src_Array[i].y = canvas.height + (Math.random() * 10 + 1) * (Math.random() * 50 + 50) + 200;\n      src_Array[i].x = Math.random() * canvas.width - 100;\n      /// Avoid Overlapping\n      while (1) {\n        src_Array[i].y = canvas.height + (Math.random() * 10 + 1) * (Math.random() * 50 + 50) + 200;\n        src_Array[i].x = Math.random() * canvas.width - 100;\n        var overlap = false;\n        for (j = 0; j < 10; j++) {\n          if (i == j) continue;\n          if (Math.abs(src_Array[i].x - src_Array[j].x) <= 200 && Math.abs(src_Array[i].y - src_Array[j].y) <= 60) {\n            overlap = true;\n            //console.log("overlap!");\n            break;\n          }\n        }\n        //console.log(overlap);\n        if (!overlap) break;\n      }\n      /////////////////////////////////////\n    }\n  }\n  //}\n}\nfunction run() {\n  update((Date.now() - time) / 1000);\n  render();\n  time = Date.now();\n}\nvar time = Date.now();\nsetInterval(run, 40);\nlet src_Array = [];\nsrc_Array[0] = new block(150, 600);\nfor (let i = 1; i < 10; i++) {\n  // let r = Math.random() * canvasB.width-100;\n  let r = Math.random() * 380;\n  let de = (Math.random() * 10 + 10 + i * 4) * 40;\n  /// Avoid Overlapping\n  while (1) {\n    // r = Math.random() * canvasB.width-100;\n    r = Math.random() * 380;\n    de = (Math.random() * 10 + 10 + i * 4) * 40;\n    let overlap = false;\n    for (let j = 0; j < i; j++) {\n      if (i == j) continue;\n      if (Math.abs(r - src_Array[j].x) <= 200 && Math.abs(de - src_Array[j].y) <= 60) {\n        overlap = true;\n        //console.log("overlap!");\n        break;\n      }\n    }\n    if (!overlap) break;\n  }\n  /////////////////////////////////////\n  if (i == 3 || i == 9) src_Array[i] = new block(r, de);else if (i == 2 || i == 7) src_Array[i] = new block(r, de);else if (i == 5) src_Array[i] = new j_Block(r, de);else src_Array[i] = new block(r, de);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///755\n')},335:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM1LmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnMtc2hhZnQtbm9kZS8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///335\n")}};__webpack_modules__[755]();var __webpack_exports__={};__webpack_modules__[335]()})();