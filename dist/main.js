(function(){"use strict";var __webpack_modules__={879:function(){eval('\n;// CONCATENATED MODULE: ./src/script/player.js\n//const maxLife = 3;\n\nclass PlayerObj {\n  constructor() {\n    this.x = 200;\n    this.y = 300;\n    this.width = 40;\n    this.height = 40;\n    this.speed = 150;\n    this.life = 5;\n    this.recondFloor = 0;\n    this.state = 0;\n    this.color = \'#FF8000\';\n  }\n}\n/* harmony default export */ var player = (PlayerObj);\n;// CONCATENATED MODULE: ./src/script/block.js\nclass BlockObj {\n  constructor(a, b) {\n    this.x = a;\n    this.y = b;\n    this.width = 150;\n    this.height = 30;\n    this.mod = 0;\n    this.color = \'#198e99\';\n  }\n}\n/* harmony default export */ var block = (BlockObj);\n;// CONCATENATED MODULE: ./src/script/j_Block.js\nclass J_BlockObj {\n  constructor(a, b) {\n    this.x = a;\n    this.y = b;\n    this.width = 130;\n    this.height = 30;\n    this.mod = 3;\n    this.color = \'#FFFF00\';\n  }\n}\n;\n/* harmony default export */ var j_Block = (J_BlockObj);\n;// CONCATENATED MODULE: ./src/script/d_Block.js\nclass D_BlockObj {\n  constructor(a, b) {\n    this.x = a;\n    this.y = b;\n    this.width = 150;\n    this.height = 30;\n    this.mod = 2;\n    this.color = \'#f70519\';\n  }\n}\n;\n/* harmony default export */ var d_Block = (D_BlockObj);\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n//--------param\nconst statusStart = \'Start\';\nconst statusEnd = \'End\';\nconst standHold = 0,\n  leftMoveAction = 1,\n  rightMoveAction = 2;\nconst bgpic = new Image();\nbgpic.src = "./assets/bg.jpg";\nconst toppic = new Image();\ntoppic.src = "./assets/top.jpg";\nconst stand = new Image();\nstand.src = "./assets/1.png";\nconst blockPic = new Image();\nblockPic.src = "./assets/block.jpg";\nconst j_blockPic = new Image();\nj_blockPic.src = "./assets/jblock.jpg";\nconst d_blockPic = new Image();\nd_blockPic.src = "./assets/dblock.jpg";\nconst leftpic = new Image();\nleftpic.src = "./assets/left.png";\nconst rightpic = new Image();\nrightpic.src = "./assets/right.png";\nconst gameOverPic = new Image();\ngameOverPic.src = "./assets/gameOver.jpg";\nlet canvasB, ctxB, canvasM, ctxM;\nlet gameStatus = statusStart;\nlet endStatus = false;\nlet src_player = new player();\nlet keysDown = {};\nlet speed = 7;\nlet up = 0,\n  up2 = 0;\nlet down = 1,\n  down2 = 1;\nlet m_y = 0,\n  m_y2 = 0,\n  flag3 = 0;\nlet leftMove = 0,\n  rightMove = 0,\n  r = 0;\nlet ms = 250;\nlet recondFloor = 0;\n\n//-------------------------\nfunction render() {\n  canvasB = document.getElementById(\'canvasBoard\');\n  ctxB = canvasB.getContext(\'2d\');\n  canvasM = document.getElementById(\'canvasMove\');\n  ctxM = canvasM.getContext(\'2d\');\n  canvasB.width = 480;\n  canvasB.height = 740;\n  canvasM.width = 480;\n  canvasM.height = 300;\n  window.addEventListener(\'keydown\', function (e) {\n    keysDown[e.keyCode] = true;\n  });\n  window.addEventListener(\'keyup\', function (e) {\n    delete keysDown[e.keyCode];\n  });\n  /////move by touch\n  canvasB.addEventListener("touchstart", function (e) {\n    touches = e.touches[0];\n    // tou = 1;\n  });\n  // canvasB.addEventListener("touchmove", function (e) {\n  //         var t = e.touches[0];\n  //         alert(touches.pageX);\n  //         if (t.pageX < touches.pageX && player.x > 0 && player.x < 560) {\n  //             player.x -= player.speed * 0.015;\n  //             player.state = 1;\n  //             if(player.x <= 0) player.x = 1;\n  //         }\n  //         else if (t.pageX > touches.pageX && player.x > 0 && player.x < 560) {\n  //             player.x += player.speed * 0.015;\n  //             player.state = 2;\n  //             if(player.x >= 560) player.x = canvasB.width-41;\n  //         }else player.state = 0;\n  //         //alert(touches.pageX);\n  //     });\t\n\n  // canvasB.addEventListener(\'mousedown \', mouseDown, false);\n\n  // function mouseDown(e) {\n  //     console.log(\'g1g\');\n  //     const rect = canvasB.getBoundingClientRect();\n  //     const x = e.clientX - rect.left; // Adjust for canvas position\n  //     const y = e.clientY - rect.top;   // Adjust for canvas position\n  //     console.log(x);\n  //     // Check if the game is over and the click is within the restart button area\n  //     if (gameStatus === statusEnd && x > 140 && x < 360 && y > 520 && y < 580) {\n  //         // Restart the game logic\n  //         console.log(\'gg\');\n  //     }\n  // \t\t// var x = e.clientX;\n  // \t\t// var y = e.clientY;\n  // \t    // if (end == 1 && (game == 0 || game == 2 )&& x > 140 && x < 360 && y>520 &&y<580) { //restart\n  // \t\t// \tflag3 =0;\n  // \t\t// \tplayer =0;\n  // \t\t// \twin =0;\n  // \t\t// \tend = 0;\t\t\n  // \t\t// \tplayer.x= 200;\n  // \t\t// \tplayer.y= 300;\n  // \t\t// \tplayer.life=fulllife;\n  // \t\t// \tplayer.recondFloor=0;\n  // \t\t// \tplayer.state=0;\n  // \t\t// \trecondFloor  =0;\n  // \t\t// \tmouse = 0;\n  // \t\t// \tgame = 0;\n  // \t\t// \tstart = 1;\n  // \t\t// \tplayer.speed = 250;\n  // \t\t// \tspeed = 5;\t\n  // \t\t// }\t\t\n  // }\n\n  const restartButton = document.getElementById(\'restartButton\');\n  restartButton.addEventListener(\'click\', restartGame);\n  function restartGame() {\n    console.log(\'Restarting game...\');\n    // Reset all game variables and states\n    gameStatus = statusStart;\n    endStatus = false;\n    src_player = new player();\n    recondFloor = 0;\n\n    // Hide the restart button\n    restartButton.style.display = \'none\';\n\n    // Restart the game loop if necessary\n    // (Optional, depending on your game logic)\n  }\n  if (gameStatus == statusStart) {\n    ctxB.drawImage(bgpic, 0, 0, canvasB.width, canvasB.height);\n    if (src_player.state == standHold) ctxB.drawImage(stand, src_player.x, src_player.y, src_player.width, src_player.height);else if (src_player.state == leftMoveAction) {\n      ctxB.drawImage(leftpic, leftMove, 0, src_player.width, src_player.height, src_player.x, src_player.y, src_player.width, src_player.height);\n      leftMove += 50;\n      if (leftMove >= 200) leftMove = 0;\n    } else if (src_player.state == rightMoveAction) {\n      ctxB.drawImage(rightpic, rightMove, 0, src_player.width, src_player.height, src_player.x, src_player.y, src_player.width, src_player.height);\n      rightMove += 50;\n      if (rightMove >= 200) rightMove = 0;\n    }\n    ctxB.drawImage(toppic, 0, 0, canvasB.width, 40);\n    for (let i = 0; i < 10; i++) {\n      if (BlockArray[i].mod == 0) ctxB.drawImage(blockPic, BlockArray[i].x, BlockArray[i].y, BlockArray[i].width, BlockArray[i].height);else if (BlockArray[i].mod == 1) ctxB.drawImage(spic, BlockArray[i].x, BlockArray[i].y, BlockArray[i].width, BlockArray[i].height);else if (BlockArray[i].mod == 2) ctxB.drawImage(d_blockPic, BlockArray[i].x, BlockArray[i].y, BlockArray[i].width, BlockArray[i].height);else if (BlockArray[i].mod == 3) ctxB.drawImage(j_blockPic, BlockArray[i].x, BlockArray[i].y, BlockArray[i].width, BlockArray[i].height);else {\n        ctxB.fillStyle = BlockArray[i].color;\n        ctxB.fillRect(BlockArray[i].x, BlockArray[i].y, BlockArray[i].width, BlockArray[i].height);\n      }\n    }\n    recondFloor++;\n  } else if (gameStatus == statusEnd && endStatus) {\n    ctxB.clearRect(0, 0, canvasM.width, canvasM.height);\n    let grd = ctxB.createLinearGradient(240, 0, 240, 640);\n    grd.addColorStop(0, "#eff2f7");\n    grd.addColorStop(1, "#052459");\n    ctxB.fillStyle = grd;\n    ctxB.fillRect(0, 0, canvasM.width, canvasM.height);\n    ctxB.font = "60px Verdana";\n    ctxB.fillStyle = "#FFA500";\n    ctxB.fillText("Game Over", 70, 100);\n    ctxB.lineWidth = 3;\n    ctxB.strokeStyle = "#8A0808";\n    ctxB.strokeText("Game Over", 70, 100);\n    src_player.life = 0;\n    ctxB.drawImage(gameOverPic, 100, 200, 280, 280);\n    ctxB.fillStyle = "#FFA500";\n    ctxB.fillRect(140, 520, 200, 50);\n    ctxB.lineWidth = 4;\n    ctxB.strokeStyle = "#8A0808";\n    ctxB.strokeRect(140, 520, 200, 50);\n    ctxB.font = "40px Verdana";\n    ctxB.fillStyle = "#FFA500";\n    ctxB.fillText("restart", 170, 560);\n    ctxB.lineWidth = 2;\n    ctxB.strokeStyle = "#8A0808";\n    ctxB.strokeText("restart", 170, 560);\n    restartButton.style.display = \'block\';\n  } else {\n    src_player.recondFloor = Math.floor(recondFloor / 70);\n    ctxM.clearRect(0, 0, canvasM.width, canvasM.height);\n    ctxM.font = "60px Verdana";\n    ctxM.fillStyle = "#F7A619";\n    ctxM.fillText("LIFE = " + src_player.life, 30, 80);\n    ctxM.lineWidth = 2;\n    ctxM.strokeStyle = "#0EA418";\n    ctxM.strokeText("LIFE = " + src_player.life, 30, 80);\n    ctxM.font = "60px Verdana";\n    ctxM.fillStyle = "#F7A619";\n    ctxM.fillText("RecondFloor = " + src_player.recondFloor, 30, 150);\n    ctxM.lineWidth = 2;\n    ctxM.strokeStyle = "#0EA418";\n    ctxM.strokeText("RecondFloor = " + src_player.recondFloor, 30, 150);\n    if (localStorage.getItem(\'rec\') < src_player.recondFloor && endStatus) localStorage[\'rec\'] = src_player.recondFloor;\n    ctxM.font = "60px Verdana";\n    ctxM.fillStyle = "#F7A619";\n    if (localStorage.getItem(\'rec\') == null) ctxM.fillText("RECORD = 0", 30, 220);else ctxM.fillText("RECORD =" + localStorage.getItem(\'rec\'), 30, 220);\n    ctxM.lineWidth = 2;\n    ctxM.strokeStyle = "#0EA418";\n    if (localStorage.getItem(\'rec\') == null) ctxM.strokeText("RECORD = 0", 30, 220);else ctxM.strokeText("RECORD =" + localStorage.getItem(\'rec\'), 30, 220);\n  }\n}\nfunction update(mod) {\n  // if(game == 1){\n  if (37 in keysDown && src_player.x >= 0 && src_player.x < canvasB.width - 40) {\n    alert(1);\n    src_player.x -= src_player.speed * mod;\n    src_player.state = 1;\n    if (src_player.x <= 0) src_player.x = 1;\n  } else if (39 in keysDown && src_player.x >= 0 && src_player.x < canvasB.width - 40) {\n    src_player.x += src_player.speed * mod;\n    src_player.state = 2;\n    if (src_player.x >= canvasB.width - 40) src_player.x = canvasB.width - 41;\n  }\n  for (let i = 0; i < 10; i++) {\n    BlockArray[i].y -= speed;\n  }\n  for (let i = 0; i < 10; i++) {\n    if (src_player.y <= BlockArray[i].y && src_player.y >= BlockArray[i].y - 40 && src_player.x > BlockArray[i].x - 20 && src_player.x < BlockArray[i].x + 150) {\n      up = 1;\n      m_y = i;\n      break;\n    } else up = 0;\n  }\n  if (up == 1) {\n    src_player.y = BlockArray[m_y].y - 40;\n    if (BlockArray[m_y].mod == 1) {\n      // if(flag == 0 &&player.life< fulllife ) player.life++;\n      // flag = 1;\n      src_player.speed = ms / 3;\n    } else if (BlockArray[m_y].mod == 2) {\n      // if(flag == 0)player.life -= 5;\n      // flag = 1;\n      src_player.speed = ms;\n    } else if (BlockArray[m_y].mod == 3) {\n      // if(flag == 0 &&player.life< fulllife ) player.life++;\n      src_player.speed = ms * 1.5;\n      src_player.y -= 100;\n      // flag = 1;\n    } else {\n      // if(flag == 0 &&player.life< fulllife ) player.life++;\n      src_player.speed = ms;\n      // flag = 1;\n    }\n  } else {\n    if (src_player.y < 35) {\n      src_player.life -= 5;\n      src_player.y = 35;\n    }\n    src_player.y += 10;\n    src_player.speed = ms;\n    // flag = 0;\n  }\n  if (canvasB != undefined && (src_player.y > canvasB.height || src_player.life <= 0)) {\n    gameStatus = statusEnd;\n    endStatus = true;\n  }\n  // console.log(flag+"  "+player.life + "   " + player.speed);\n  if (src_player.stair > 95) speed = 15;else if (src_player.stair > 80) speed = 14;else if (src_player.stair > 65) speed = 10;else if (src_player.stair > 50) speed = 10;else if (src_player.stair > 35) speed = 9;else if (src_player.stair > 20) speed = 8;\n  for (let i = 0; i < 10; i++) {\n    if (BlockArray[i].y <= 30) {\n      BlockArray[i].y = canvasB.height + (Math.random() * 10 + 1) * (Math.random() * 50 + 50) + 100;\n      BlockArray[i].x = Math.random() * canvasB.width - 100;\n      /// Avoid Overlapping\n      while (1) {\n        BlockArray[i].y = canvasB.height + (Math.random() * 10 + 1) * (Math.random() * 50 + 50) + 100;\n        BlockArray[i].x = Math.random() * canvasB.width - 100;\n        var overlap = false;\n        for (let j = 0; j < 10; j++) {\n          if (i == j) continue;\n          if (Math.abs(BlockArray[i].x - BlockArray[j].x) <= 200 && Math.abs(BlockArray[i].y - BlockArray[j].y) <= 60) {\n            overlap = true;\n            //console.log("overlap!");\n            break;\n          }\n        }\n        //console.log(overlap);\n        if (!overlap) break;\n      }\n      /////////////////////////////////////\n    }\n  }\n  //}\n}\nfunction run() {\n  update((Date.now() - time) / 1000);\n  render();\n  time = Date.now();\n}\nvar time = Date.now();\nsetInterval(run, 35);\nlet BlockArray = [];\nBlockArray[0] = new block(150, 600);\nfor (let i = 1; i < 10; i++) {\n  let r;\n  if (canvasB != null && canvasB.width != null) r = Math.random() * canvasB.width - 150;else r = Math.random() * 380;\n  //let r = Math.random() * 380;\n  let de = (Math.random() * 20 + i * 4) * 40;\n  /// Avoid Overlapping\n  while (1) {\n    if (canvasB != null && canvasB.width != null) r = Math.random() * canvasB.width - 150;else r = Math.random() * 380;\n    // = Math.random() * canvasB.width-100;\n    //r = Math.random() * 380;\n    de = (Math.random() * 20 + i * 4) * 40;\n    let overlap = false;\n    for (let j = 0; j < i; j++) {\n      if (i == j) continue;\n      if (Math.abs(r - BlockArray[j].x) <= 200 && Math.abs(de - BlockArray[j].y) <= 60) {\n        overlap = true;\n        //console.log("overlap!");\n        break;\n      }\n    }\n    if (!overlap) break;\n  }\n  /////////////////////////////////////\n  if (i == 3 || i == 9) BlockArray[i] = new d_Block(r, de);else if (i == 2 || i == 7) BlockArray[i] = new block(r, de);else if (i == 5) BlockArray[i] = new j_Block(r, de);else BlockArray[i] = new block(r, de);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLEVBQUd5QixDQUFDLEVBQUUsRUFDM0I7TUFDSSxJQUFHekIsQ0FBQyxJQUFFeUIsQ0FBQyxFQUFFO01BQ1QsSUFBS1YsSUFBSSxDQUFDVyxHQUFHLENBQUM1QyxDQUFDLEdBQUNtQixVQUFVLENBQUN3QixDQUFDLENBQUMsQ0FBQzNGLENBQUMsQ0FBQyxJQUFFLEdBQUcsSUFBTWlGLElBQUksQ0FBQ1csR0FBRyxDQUFDTSxFQUFFLEdBQUMvQixVQUFVLENBQUN3QixDQUFDLENBQUMsQ0FBQzFGLENBQUMsQ0FBQyxJQUFFLEVBQUcsRUFDNUU7UUFDSXlGLE9BQU8sR0FBRyxJQUFJO1FBQ2Q7UUFDQTtNQUNKO0lBQ0o7SUFDQSxJQUFHLENBQUNBLE9BQU8sRUFBRTtFQUNqQjtFQUNBO0VBQ0EsSUFBR3hCLENBQUMsSUFBSSxDQUFDLElBQUlBLENBQUMsSUFBSSxDQUFDLEVBQUdDLFVBQVUsQ0FBQ0QsQ0FBQyxDQUFDLEdBQUcsSUFBSXBELE9BQVUsQ0FBQ2tDLENBQUMsRUFBQ2tELEVBQUUsQ0FBQyxDQUFDLEtBQ3RELElBQUtoQyxDQUFDLElBQUksQ0FBQyxJQUFJQSxDQUFDLElBQUksQ0FBQyxFQUFFQyxVQUFVLENBQUNELENBQUMsQ0FBQyxHQUFHLElBQUl6RCxLQUFRLENBQUN1QyxDQUFDLEVBQUNrRCxFQUFFLENBQUMsQ0FBQyxLQUMxRCxJQUFLaEMsQ0FBQyxJQUFJLENBQUMsRUFBR0MsVUFBVSxDQUFDRCxDQUFDLENBQUMsR0FBRyxJQUFJckQsT0FBVSxDQUFDbUMsQ0FBQyxFQUFDa0QsRUFBRSxDQUFDLENBQUMsS0FDbkQvQixVQUFVLENBQUNELENBQUMsQ0FBQyxHQUFHLElBQUl6RCxLQUFRLENBQUN1QyxDQUFDLEVBQUNrRCxFQUFFLENBQUM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ucy1zaGFmdC1ub2RlLy4vc3JjL3NjcmlwdC9wbGF5ZXIuanM/OGEwMiIsIndlYnBhY2s6Ly9ucy1zaGFmdC1ub2RlLy4vc3JjL3NjcmlwdC9ibG9jay5qcz9jODI2Iiwid2VicGFjazovL25zLXNoYWZ0LW5vZGUvLi9zcmMvc2NyaXB0L2pfQmxvY2suanM/YzJiYiIsIndlYnBhY2s6Ly9ucy1zaGFmdC1ub2RlLy4vc3JjL3NjcmlwdC9kX0Jsb2NrLmpzPzA0ZDciLCJ3ZWJwYWNrOi8vbnMtc2hhZnQtbm9kZS8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vY29uc3QgbWF4TGlmZSA9IDM7XHJcblxyXG5jbGFzcyBQbGF5ZXJPYmp7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMueCA9IDIwMDsgXHJcbiAgICAgICAgdGhpcy55PSAzMDA7ICAgXHJcbiAgICAgICAgdGhpcy53aWR0aD0gNDA7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQ9IDQwOyAgXHJcbiAgICAgICAgdGhpcy5zcGVlZD0gMTUwOyAgIFxyXG4gICAgICAgIHRoaXMubGlmZT0gNTtcclxuICAgICAgICB0aGlzLnJlY29uZEZsb29yPTA7ICAgICAgXHJcbiAgICAgICAgdGhpcy5zdGF0ZT0wO1xyXG4gICAgICAgIHRoaXMuY29sb3I9ICcjRkY4MDAwJztcclxuICAgIH1cclxufSBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBsYXllck9iajsgIiwiY2xhc3MgQmxvY2tPYmp7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKGEsYikge1xyXG4gICAgICAgIHRoaXMueD0gYTtcclxuICAgICAgICB0aGlzLnk9IGI7XHJcbiAgICAgICAgdGhpcy53aWR0aD0gMTUwO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0PSAzMDtcclxuICAgICAgICB0aGlzLm1vZCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9ICcjMTk4ZTk5JztcclxuICAgIH1cclxufSBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJsb2NrT2JqOyAiLCJjbGFzcyBKX0Jsb2NrT2Jqe1xyXG4gICAgY29uc3RydWN0b3IoYSxiKSB7XHJcbiAgICAgICAgdGhpcy54PSBhO1xyXG4gICAgICAgIHRoaXMueT0gYjtcclxuICAgICAgICB0aGlzLndpZHRoPSAxMzA7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQ9IDMwO1xyXG4gICAgICAgIHRoaXMubW9kID0gMztcclxuICAgICAgICB0aGlzLmNvbG9yID0gJyNGRkZGMDAnO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSl9CbG9ja09iajsgXHJcbiIsImNsYXNzIERfQmxvY2tPYmp7XHJcbiAgICBjb25zdHJ1Y3RvcihhLGIpIHtcclxuICAgICAgICB0aGlzLng9IGE7XHJcbiAgICAgICAgdGhpcy55PSBiO1xyXG4gICAgICAgIHRoaXMud2lkdGg9IDE1MDtcclxuICAgICAgICB0aGlzLmhlaWdodD0gMzA7XHJcbiAgICAgICAgdGhpcy5tb2QgPSAyO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSAnI2Y3MDUxOSc7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEX0Jsb2NrT2JqOyBcclxuIiwiaW1wb3J0IFBsYXllck9iaiBmcm9tIFwiLi9zY3JpcHQvcGxheWVyLmpzXCJcclxuaW1wb3J0IEJsb2NrT2JqIGZyb20gXCIuL3NjcmlwdC9ibG9jay5qc1wiO1xyXG5pbXBvcnQgSl9CbG9ja09iaiBmcm9tIFwiLi9zY3JpcHQval9CbG9jay5qc1wiO1xyXG5pbXBvcnQgRF9CbG9ja09iaiBmcm9tIFwiLi9zY3JpcHQvZF9CbG9jay5qc1wiO1xyXG5cclxuLy8tLS0tLS0tLXBhcmFtXHJcbmNvbnN0IHN0YXR1c1N0YXJ0ID0gJ1N0YXJ0JztcclxuY29uc3Qgc3RhdHVzRW5kID0gJ0VuZCc7XHJcbmNvbnN0IHN0YW5kSG9sZCA9IDAsIGxlZnRNb3ZlQWN0aW9uID0gMSAscmlnaHRNb3ZlQWN0aW9uID0gMjtcclxuXHJcbmNvbnN0IGJncGljPW5ldyBJbWFnZSgpO1xyXG5cdFx0YmdwaWMuc3JjPVwiLi9hc3NldHMvYmcuanBnXCI7XHJcbmNvbnN0IHRvcHBpYz1uZXcgSW1hZ2UoKTtcclxuXHRcdCB0b3BwaWMuc3JjPVwiLi9hc3NldHMvdG9wLmpwZ1wiO1xyXG5jb25zdCBzdGFuZD1uZXcgSW1hZ2UoKTtcclxuXHRcdCBzdGFuZC5zcmM9XCIuL2Fzc2V0cy8xLnBuZ1wiO1xyXG5jb25zdCBibG9ja1BpYz1uZXcgSW1hZ2UoKTtcclxuXHRcdGJsb2NrUGljLnNyYz1cIi4vYXNzZXRzL2Jsb2NrLmpwZ1wiO1xyXG5jb25zdCBqX2Jsb2NrUGljPW5ldyBJbWFnZSgpO1xyXG5cdFx0al9ibG9ja1BpYy5zcmM9XCIuL2Fzc2V0cy9qYmxvY2suanBnXCI7XHJcbmNvbnN0IGRfYmxvY2tQaWM9bmV3IEltYWdlKCk7XHJcbiAgICAgICAgZF9ibG9ja1BpYy5zcmM9XCIuL2Fzc2V0cy9kYmxvY2suanBnXCI7XHJcbmNvbnN0IGxlZnRwaWM9bmV3IEltYWdlKCk7XHJcblx0XHRsZWZ0cGljLnNyYz1cIi4vYXNzZXRzL2xlZnQucG5nXCI7XHJcbmNvbnN0IHJpZ2h0cGljPW5ldyBJbWFnZSgpO1xyXG5cdFx0cmlnaHRwaWMuc3JjPVwiLi9hc3NldHMvcmlnaHQucG5nXCI7XHJcbmNvbnN0IGdhbWVPdmVyUGljPW5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGdhbWVPdmVyUGljLnNyYz1cIi4vYXNzZXRzL2dhbWVPdmVyLmpwZ1wiO1xyXG5sZXQgY2FudmFzQixjdHhCLGNhbnZhc00sY3R4TTtcclxuXHJcbmxldCBnYW1lU3RhdHVzID0gc3RhdHVzU3RhcnQ7XHJcbmxldCBlbmRTdGF0dXMgPSBmYWxzZTtcclxubGV0IHBsYXllciA9IG5ldyBQbGF5ZXJPYmooKTtcclxubGV0IGtleXNEb3duID0ge307XHJcbmxldCBzcGVlZCA9IDc7IFxyXG5sZXQgdXAgPSAwLHVwMj0wO1xyXG5sZXQgZG93biA9IDEsZG93bjIgPSAxOyBcclxubGV0IG1feSA9IDAsbV95MiA9IDAsZmxhZzMgPSAwO1xyXG5sZXQgbGVmdE1vdmUgPSAwICxyaWdodE1vdmUgPSAwLHIgPSAwO1xyXG5sZXQgbXMgPSAyNTA7XHJcbmxldCByZWNvbmRGbG9vciA9IDA7XHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gICAgY2FudmFzQiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXNCb2FyZCcpO1xyXG4gICAgY3R4QiA9IGNhbnZhc0IuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIGNhbnZhc00gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzTW92ZScpOyBcclxuICAgIGN0eE0gPSBjYW52YXNNLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjYW52YXNCLndpZHRoID0gNDgwO1xyXG4gICAgY2FudmFzQi5oZWlnaHQgPSA3NDA7XHJcbiAgICBjYW52YXNNLndpZHRoID0gNDgwO1xyXG4gICAgY2FudmFzTS5oZWlnaHQgPSAzMDA7XHJcblxyXG4gICAgXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBrZXlzRG93bltlLmtleUNvZGVdID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGRlbGV0ZSBrZXlzRG93bltlLmtleUNvZGVdO1xyXG4gICAgfSk7XHJcbiAgICAvLy8vL21vdmUgYnkgdG91Y2hcclxuICAgIGNhbnZhc0IuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdG91Y2hlcyA9IGUudG91Y2hlc1swXTtcclxuICAgICAgICAgIC8vIHRvdSA9IDE7XHJcbiAgICAgICAgfSk7XHJcbiAgICAvLyBjYW52YXNCLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgIC8vICAgICAgICAgdmFyIHQgPSBlLnRvdWNoZXNbMF07XHJcbiAgICAvLyAgICAgICAgIGFsZXJ0KHRvdWNoZXMucGFnZVgpO1xyXG4gICAgLy8gICAgICAgICBpZiAodC5wYWdlWCA8IHRvdWNoZXMucGFnZVggJiYgcGxheWVyLnggPiAwICYmIHBsYXllci54IDwgNTYwKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBwbGF5ZXIueCAtPSBwbGF5ZXIuc3BlZWQgKiAwLjAxNTtcclxuICAgIC8vICAgICAgICAgICAgIHBsYXllci5zdGF0ZSA9IDE7XHJcbiAgICAvLyAgICAgICAgICAgICBpZihwbGF5ZXIueCA8PSAwKSBwbGF5ZXIueCA9IDE7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZSBpZiAodC5wYWdlWCA+IHRvdWNoZXMucGFnZVggJiYgcGxheWVyLnggPiAwICYmIHBsYXllci54IDwgNTYwKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBwbGF5ZXIueCArPSBwbGF5ZXIuc3BlZWQgKiAwLjAxNTtcclxuICAgIC8vICAgICAgICAgICAgIHBsYXllci5zdGF0ZSA9IDI7XHJcbiAgICAvLyAgICAgICAgICAgICBpZihwbGF5ZXIueCA+PSA1NjApIHBsYXllci54ID0gY2FudmFzQi53aWR0aC00MTtcclxuICAgIC8vICAgICAgICAgfWVsc2UgcGxheWVyLnN0YXRlID0gMDtcclxuICAgIC8vICAgICAgICAgLy9hbGVydCh0b3VjaGVzLnBhZ2VYKTtcclxuICAgIC8vICAgICB9KTtcdFxyXG5cclxuICAgIC8vIGNhbnZhc0IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duICcsIG1vdXNlRG93biwgZmFsc2UpO1xyXG5cclxuXHQvLyBmdW5jdGlvbiBtb3VzZURvd24oZSkge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdnMWcnKTtcclxuICAgIC8vICAgICBjb25zdCByZWN0ID0gY2FudmFzQi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIC8vICAgICBjb25zdCB4ID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0OyAvLyBBZGp1c3QgZm9yIGNhbnZhcyBwb3NpdGlvblxyXG4gICAgLy8gICAgIGNvbnN0IHkgPSBlLmNsaWVudFkgLSByZWN0LnRvcDsgICAvLyBBZGp1c3QgZm9yIGNhbnZhcyBwb3NpdGlvblxyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKHgpO1xyXG4gICAgLy8gICAgIC8vIENoZWNrIGlmIHRoZSBnYW1lIGlzIG92ZXIgYW5kIHRoZSBjbGljayBpcyB3aXRoaW4gdGhlIHJlc3RhcnQgYnV0dG9uIGFyZWFcclxuICAgIC8vICAgICBpZiAoZ2FtZVN0YXR1cyA9PT0gc3RhdHVzRW5kICYmIHggPiAxNDAgJiYgeCA8IDM2MCAmJiB5ID4gNTIwICYmIHkgPCA1ODApIHtcclxuICAgIC8vICAgICAgICAgLy8gUmVzdGFydCB0aGUgZ2FtZSBsb2dpY1xyXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnZ2cnKTtcclxuICAgIC8vICAgICB9XHJcblx0Ly8gXHRcdC8vIHZhciB4ID0gZS5jbGllbnRYO1xyXG5cdC8vIFx0XHQvLyB2YXIgeSA9IGUuY2xpZW50WTtcclxuXHQvLyBcdCAgICAvLyBpZiAoZW5kID09IDEgJiYgKGdhbWUgPT0gMCB8fCBnYW1lID09IDIgKSYmIHggPiAxNDAgJiYgeCA8IDM2MCAmJiB5PjUyMCAmJnk8NTgwKSB7IC8vcmVzdGFydFxyXG5cdC8vIFx0XHQvLyBcdGZsYWczID0wO1xyXG5cdC8vIFx0XHQvLyBcdHBsYXllciA9MDtcclxuXHQvLyBcdFx0Ly8gXHR3aW4gPTA7XHJcblx0Ly8gXHRcdC8vIFx0ZW5kID0gMDtcdFx0XHJcblx0Ly8gXHRcdC8vIFx0cGxheWVyLng9IDIwMDtcclxuXHQvLyBcdFx0Ly8gXHRwbGF5ZXIueT0gMzAwO1xyXG5cdC8vIFx0XHQvLyBcdHBsYXllci5saWZlPWZ1bGxsaWZlO1xyXG5cdC8vIFx0XHQvLyBcdHBsYXllci5yZWNvbmRGbG9vcj0wO1xyXG5cdC8vIFx0XHQvLyBcdHBsYXllci5zdGF0ZT0wO1xyXG5cdC8vIFx0XHQvLyBcdHJlY29uZEZsb29yICA9MDtcclxuXHQvLyBcdFx0Ly8gXHRtb3VzZSA9IDA7XHJcblx0Ly8gXHRcdC8vIFx0Z2FtZSA9IDA7XHJcblx0Ly8gXHRcdC8vIFx0c3RhcnQgPSAxO1xyXG5cdC8vIFx0XHQvLyBcdHBsYXllci5zcGVlZCA9IDI1MDtcclxuXHQvLyBcdFx0Ly8gXHRzcGVlZCA9IDU7XHRcclxuXHQvLyBcdFx0Ly8gfVx0XHRcclxuXHQvLyB9XHJcblxyXG4gICAgY29uc3QgcmVzdGFydEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXJ0QnV0dG9uJyk7XHJcbiAgICByZXN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVzdGFydEdhbWUpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiByZXN0YXJ0R2FtZSgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnUmVzdGFydGluZyBnYW1lLi4uJyk7XHJcbiAgICAgICAgLy8gUmVzZXQgYWxsIGdhbWUgdmFyaWFibGVzIGFuZCBzdGF0ZXNcclxuICAgICAgICBnYW1lU3RhdHVzID0gc3RhdHVzU3RhcnQ7XHJcbiAgICAgICAgZW5kU3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgcGxheWVyID0gbmV3IFBsYXllck9iaigpO1xyXG4gICAgICAgIHJlY29uZEZsb29yID0gMDtcclxuICAgIFxyXG4gICAgICAgIC8vIEhpZGUgdGhlIHJlc3RhcnQgYnV0dG9uXHJcbiAgICAgICAgcmVzdGFydEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgXHJcbiAgICAgICAgLy8gUmVzdGFydCB0aGUgZ2FtZSBsb29wIGlmIG5lY2Vzc2FyeVxyXG4gICAgICAgIC8vIChPcHRpb25hbCwgZGVwZW5kaW5nIG9uIHlvdXIgZ2FtZSBsb2dpYylcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYoZ2FtZVN0YXR1cyA9PSBzdGF0dXNTdGFydCApe1xyXG4gICAgICAgIGN0eEIuZHJhd0ltYWdlKGJncGljLDAsMCxjYW52YXNCLndpZHRoLGNhbnZhc0IuaGVpZ2h0KTtcclxuICAgICAgICBpZihwbGF5ZXIuc3RhdGUgPT0gc3RhbmRIb2xkICkgXHJcbiAgICAgICAgICAgIGN0eEIuZHJhd0ltYWdlKHN0YW5kLHBsYXllci54LHBsYXllci55LHBsYXllci53aWR0aCxwbGF5ZXIuaGVpZ2h0KTtcclxuICAgICAgICBlbHNlIGlmKHBsYXllci5zdGF0ZSA9PSBsZWZ0TW92ZUFjdGlvbil7XHJcbiAgICAgICAgICAgIGN0eEIuZHJhd0ltYWdlKGxlZnRwaWMsbGVmdE1vdmUsMCxwbGF5ZXIud2lkdGgscGxheWVyLmhlaWdodCxwbGF5ZXIueCxwbGF5ZXIueSxwbGF5ZXIud2lkdGgscGxheWVyLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGxlZnRNb3ZlKz01MDtcclxuICAgICAgICAgICAgaWYobGVmdE1vdmUgPj0gMjAwKSBsZWZ0TW92ZSA9MDtcclxuICAgICAgICB9XHRcclxuICAgICAgICBlbHNlIGlmKHBsYXllci5zdGF0ZSA9PSByaWdodE1vdmVBY3Rpb24pe1xyXG4gICAgICAgICAgICBjdHhCLmRyYXdJbWFnZShyaWdodHBpYyxyaWdodE1vdmUsMCxwbGF5ZXIud2lkdGgscGxheWVyLmhlaWdodCxwbGF5ZXIueCxwbGF5ZXIueSxwbGF5ZXIud2lkdGgscGxheWVyLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHJpZ2h0TW92ZSArPTUwO1xyXG4gICAgICAgICAgICBpZihyaWdodE1vdmUgPj0gMjAwKSByaWdodE1vdmUgPTA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN0eEIuZHJhd0ltYWdlKHRvcHBpYywwLDAsY2FudmFzQi53aWR0aCw0MCk7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCAxMCA7IGkrKyl7XHJcbiAgICAgICAgICAgIGlmKEJsb2NrQXJyYXlbaV0ubW9kID09IDApIGN0eEIuZHJhd0ltYWdlKGJsb2NrUGljLEJsb2NrQXJyYXlbaV0ueCwgQmxvY2tBcnJheVtpXS55LCBCbG9ja0FycmF5W2ldLndpZHRoLCBCbG9ja0FycmF5W2ldLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgIChCbG9ja0FycmF5W2ldLm1vZCA9PSAxKSBjdHhCLmRyYXdJbWFnZShzcGljLEJsb2NrQXJyYXlbaV0ueCwgQmxvY2tBcnJheVtpXS55LCBCbG9ja0FycmF5W2ldLndpZHRoLCBCbG9ja0FycmF5W2ldLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgIChCbG9ja0FycmF5W2ldLm1vZCA9PSAyKSBjdHhCLmRyYXdJbWFnZShkX2Jsb2NrUGljLEJsb2NrQXJyYXlbaV0ueCwgQmxvY2tBcnJheVtpXS55LCBCbG9ja0FycmF5W2ldLndpZHRoLCBCbG9ja0FycmF5W2ldLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgIChCbG9ja0FycmF5W2ldLm1vZCA9PSAzKSBjdHhCLmRyYXdJbWFnZShqX2Jsb2NrUGljLEJsb2NrQXJyYXlbaV0ueCwgQmxvY2tBcnJheVtpXS55LCBCbG9ja0FycmF5W2ldLndpZHRoLCBCbG9ja0FycmF5W2ldLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBjdHhCLmZpbGxTdHlsZSA9IEJsb2NrQXJyYXlbaV0uY29sb3I7XHJcbiAgICAgICAgICAgICAgICBjdHhCLmZpbGxSZWN0KEJsb2NrQXJyYXlbaV0ueCwgQmxvY2tBcnJheVtpXS55LCBCbG9ja0FycmF5W2ldLndpZHRoLCBCbG9ja0FycmF5W2ldLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cdFxyXG4gICAgICAgIH1cclxuICAgICAgICByZWNvbmRGbG9vcisrO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiggKGdhbWVTdGF0dXMgPT0gc3RhdHVzRW5kKSAmJiBlbmRTdGF0dXMpe1xyXG4gICAgICAgIGN0eEIuY2xlYXJSZWN0KDAsIDAsIGNhbnZhc00ud2lkdGgsIGNhbnZhc00uaGVpZ2h0KTtcclxuICAgICAgICBsZXQgZ3JkPWN0eEIuY3JlYXRlTGluZWFyR3JhZGllbnQoMjQwLDAsMjQwLDY0MCk7XHJcbiAgICAgICAgZ3JkLmFkZENvbG9yU3RvcCgwLFwiI2VmZjJmN1wiKTtcclxuICAgICAgICBncmQuYWRkQ29sb3JTdG9wKDEsXCIjMDUyNDU5XCIpO1xyXG4gICAgICAgIGN0eEIuZmlsbFN0eWxlPWdyZDtcclxuICAgICAgICBjdHhCLmZpbGxSZWN0KDAsMCxjYW52YXNNLndpZHRoLGNhbnZhc00uaGVpZ2h0KTtcclxuICAgICAgICBjdHhCLmZvbnQgPSBcIjYwcHggVmVyZGFuYVwiO1xyXG4gICAgICAgIGN0eEIuZmlsbFN0eWxlID0gXCIjRkZBNTAwXCI7XHJcbiAgICAgICAgY3R4Qi5maWxsVGV4dChcIkdhbWUgT3ZlclwiLCA3MCwgMTAwKTtcclxuICAgICAgICBjdHhCLmxpbmVXaWR0aCA9IDM7XHJcbiAgICAgICAgY3R4Qi5zdHJva2VTdHlsZSA9IFwiIzhBMDgwOFwiO1xyXG4gICAgICAgIGN0eEIuc3Ryb2tlVGV4dChcIkdhbWUgT3ZlclwiLCA3MCwgMTAwKTtcclxuICAgICAgICBwbGF5ZXIubGlmZSA9IDA7XHJcbiAgICAgICAgY3R4Qi5kcmF3SW1hZ2UoZ2FtZU92ZXJQaWMsMTAwLCAyMDAsIDI4MCwyODApO1xyXG4gICAgICAgIGN0eEIuZmlsbFN0eWxlID0gXCIjRkZBNTAwXCI7XHJcbiAgICAgICAgY3R4Qi5maWxsUmVjdCgxNDAsNTIwLDIwMCw1MCk7XHJcbiAgICAgICAgY3R4Qi5saW5lV2lkdGggPSA0O1xyXG4gICAgICAgIGN0eEIuc3Ryb2tlU3R5bGUgPSBcIiM4QTA4MDhcIjtcclxuICAgICAgICBjdHhCLnN0cm9rZVJlY3QoMTQwLDUyMCwyMDAsNTApO1xyXG4gICAgICAgIGN0eEIuZm9udCA9IFwiNDBweCBWZXJkYW5hXCI7XHJcbiAgICAgICAgY3R4Qi5maWxsU3R5bGUgPSBcIiNGRkE1MDBcIjtcclxuICAgICAgICBjdHhCLmZpbGxUZXh0KFwicmVzdGFydFwiLCAxNzAsIDU2MCk7XHJcbiAgICAgICAgY3R4Qi5saW5lV2lkdGggPSAyO1xyXG4gICAgICAgIGN0eEIuc3Ryb2tlU3R5bGUgPSBcIiM4QTA4MDhcIjtcclxuICAgICAgICBjdHhCLnN0cm9rZVRleHQoXCJyZXN0YXJ0XCIsIDE3MCwgNTYwKTtcclxuXHJcbiAgICAgICAgcmVzdGFydEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH1cclxuICAgIGVsc2V7IFxyXG4gICAgICAgIHBsYXllci5yZWNvbmRGbG9vciA9IE1hdGguZmxvb3IocmVjb25kRmxvb3IvNzApO1xyXG4gICAgICAgIGN0eE0uY2xlYXJSZWN0KDAsIDAsY2FudmFzTS53aWR0aCxjYW52YXNNLmhlaWdodCk7XHJcbiAgICAgICAgY3R4TS5mb250ID0gXCI2MHB4IFZlcmRhbmFcIjtcclxuICAgICAgICBjdHhNLmZpbGxTdHlsZSA9IFwiI0Y3QTYxOVwiO1xyXG4gICAgICAgIGN0eE0uZmlsbFRleHQoXCJMSUZFID0gXCIgKyBwbGF5ZXIubGlmZSwgMzAsIDgwKTtcclxuICAgICAgICBjdHhNLmxpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgY3R4TS5zdHJva2VTdHlsZSA9IFwiIzBFQTQxOFwiO1xyXG4gICAgICAgIGN0eE0uc3Ryb2tlVGV4dChcIkxJRkUgPSBcIiArIHBsYXllci5saWZlLCAzMCwgODApO1xyXG4gICAgICAgIGN0eE0uZm9udCA9IFwiNjBweCBWZXJkYW5hXCI7XHJcbiAgICAgICAgY3R4TS5maWxsU3R5bGUgPSBcIiNGN0E2MTlcIjtcclxuICAgICAgICBjdHhNLmZpbGxUZXh0KFwiUmVjb25kRmxvb3IgPSBcIiArIHBsYXllci5yZWNvbmRGbG9vciwgMzAsIDE1MCk7XHJcbiAgICAgICAgY3R4TS5saW5lV2lkdGggPSAyO1xyXG4gICAgICAgIGN0eE0uc3Ryb2tlU3R5bGUgPSBcIiMwRUE0MThcIjtcclxuICAgICAgICBjdHhNLnN0cm9rZVRleHQoXCJSZWNvbmRGbG9vciA9IFwiICsgcGxheWVyLnJlY29uZEZsb29yLCAzMCwgMTUwKTtcclxuICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVjJykgPCBwbGF5ZXIucmVjb25kRmxvb3IgJiYgZW5kU3RhdHVzKSBsb2NhbFN0b3JhZ2VbJ3JlYyddID0gcGxheWVyLnJlY29uZEZsb29yO1xyXG4gICAgICAgIGN0eE0uZm9udCA9IFwiNjBweCBWZXJkYW5hXCI7XHJcbiAgICAgICAgY3R4TS5maWxsU3R5bGUgPSBcIiNGN0E2MTlcIjtcclxuICAgICAgICBpZiggbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3JlYycpID09IG51bGwpIGN0eE0uZmlsbFRleHQoXCJSRUNPUkQgPSAwXCIgLCAzMCwgMjIwKTtcclxuICAgICAgICBlbHNlIGN0eE0uZmlsbFRleHQoXCJSRUNPUkQgPVwiICsgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3JlYycpLCAzMCwgMjIwKTtcclxuICAgICAgICBjdHhNLmxpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgY3R4TS5zdHJva2VTdHlsZSA9IFwiIzBFQTQxOFwiO1xyXG4gICAgICAgIGlmKCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVjJykgPT0gbnVsbCkgY3R4TS5zdHJva2VUZXh0KFwiUkVDT1JEID0gMFwiICwgMzAsIDIyMCk7XHJcbiAgICAgICAgZWxzZSBjdHhNLnN0cm9rZVRleHQoXCJSRUNPUkQgPVwiICsgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3JlYycpLCAzMCwgMjIwKTtcclxuICAgICAgICB9XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlKG1vZCkge1xyXG4gICAgLy8gaWYoZ2FtZSA9PSAxKXtcclxuICAgIGlmICgzNyBpbiBrZXlzRG93biAmJiBwbGF5ZXIueCA+PSAwICYmIHBsYXllci54IDwgKGNhbnZhc0Iud2lkdGgtNDApICkge1xyXG4gICAgICAgIGFsZXJ0KDEpO1xyXG4gICAgICAgIHBsYXllci54IC09IHBsYXllci5zcGVlZCAqIG1vZDtcclxuICAgICAgICBwbGF5ZXIuc3RhdGUgPSAxO1xyXG4gICAgICAgIGlmKHBsYXllci54IDw9IDApIHBsYXllci54ID0gMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKDM5IGluIGtleXNEb3duICYmIHBsYXllci54ID49IDAgJiYgcGxheWVyLnggPCAoY2FudmFzQi53aWR0aC00MCkpIHtcclxuICAgICAgICBwbGF5ZXIueCArPSBwbGF5ZXIuc3BlZWQgKiBtb2Q7XHJcbiAgICAgICAgcGxheWVyLnN0YXRlID0gMjtcclxuICAgICAgICBpZihwbGF5ZXIueCA+PSAoY2FudmFzQi53aWR0aC00MCkgKSBwbGF5ZXIueCA9IGNhbnZhc0Iud2lkdGgtNDE7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGkgPSAwIDsgaSA8IDEwOyBpKyspe1xyXG4gICAgICAgIEJsb2NrQXJyYXlbaV0ueSAtPSBzcGVlZDtcclxuICAgIH1cclxuICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgMTAgOyBpKyspe1xyXG4gICAgICAgIGlmKChwbGF5ZXIueSA8PSBCbG9ja0FycmF5W2ldLnkgICYmcGxheWVyLnkgPj0gQmxvY2tBcnJheVtpXS55IC00MCApJiYgcGxheWVyLnggPkJsb2NrQXJyYXlbaV0ueC0yMCAmJiBwbGF5ZXIueCA8IEJsb2NrQXJyYXlbaV0ueCArMTUwKXtcclxuICAgICAgICAgICAgdXAgPTE7XHJcbiAgICAgICAgICAgIG1feSA9IGk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHVwID0gMDtcclxuICAgIH1cdFxyXG4gICAgaWYodXAgPT0gMSl7XHJcbiAgICAgICAgcGxheWVyLnkgPSBCbG9ja0FycmF5W21feV0ueS00MDtcclxuICAgICAgICBpZihCbG9ja0FycmF5W21feV0ubW9kID09IDEpIHtcclxuICAgICAgICAgICAgLy8gaWYoZmxhZyA9PSAwICYmcGxheWVyLmxpZmU8IGZ1bGxsaWZlICkgcGxheWVyLmxpZmUrKztcclxuICAgICAgICAgICAgLy8gZmxhZyA9IDE7XHJcbiAgICAgICAgICAgIHBsYXllci5zcGVlZD1tcy8zO1xyXG4gICAgICAgIH1lbHNlIGlmIChCbG9ja0FycmF5W21feV0ubW9kID09IDIpe1xyXG4gICAgICAgICAgICAvLyBpZihmbGFnID09IDApcGxheWVyLmxpZmUgLT0gNTtcclxuICAgICAgICAgICAgLy8gZmxhZyA9IDE7XHJcbiAgICAgICAgICAgIHBsYXllci5zcGVlZCA9IG1zO1xyXG4gICAgICAgIH1lbHNlIGlmKEJsb2NrQXJyYXlbbV95XS5tb2QgPT0gMyl7XHJcbiAgICAgICAgICAgIC8vIGlmKGZsYWcgPT0gMCAmJnBsYXllci5saWZlPCBmdWxsbGlmZSApIHBsYXllci5saWZlKys7XHJcbiAgICAgICAgICAgIHBsYXllci5zcGVlZCA9IG1zKjEuNTtcclxuICAgICAgICAgICAgcGxheWVyLnkgLT0gMTAwO1xyXG4gICAgICAgICAgICAvLyBmbGFnID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGlmKGZsYWcgPT0gMCAmJnBsYXllci5saWZlPCBmdWxsbGlmZSApIHBsYXllci5saWZlKys7XHJcbiAgICAgICAgICAgIHBsYXllci5zcGVlZCA9bXM7XHJcbiAgICAgICAgICAgIC8vIGZsYWcgPSAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgIHtcclxuICAgICAgICBpZiggcGxheWVyLnk8MzUgKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGxheWVyLmxpZmUgLT0gNTtcclxuICAgICAgICAgICAgcGxheWVyLnkgPSAzNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGxheWVyLnkgKz0gMTA7XHJcbiAgICAgICAgcGxheWVyLnNwZWVkID1tcztcclxuICAgICAgICAvLyBmbGFnID0gMDtcclxuICAgIH1cclxuICAgIGlmKGNhbnZhc0IhPXVuZGVmaW5lZCAmJiAocGxheWVyLnkgPiBjYW52YXNCLmhlaWdodCB8fCBwbGF5ZXIubGlmZSA8PTApKSB7XHJcbiAgICAgICAgZ2FtZVN0YXR1cyA9IHN0YXR1c0VuZDtcclxuICAgICAgICBlbmRTdGF0dXMgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZmxhZytcIiAgXCIrcGxheWVyLmxpZmUgKyBcIiAgIFwiICsgcGxheWVyLnNwZWVkKTtcclxuICAgIGlmKHBsYXllci5zdGFpciA+IDk1KSBzcGVlZCA9IDE1O1xyXG4gICAgZWxzZSBpZihwbGF5ZXIuc3RhaXIgPiA4MCkgc3BlZWQgPSAxNDtcclxuICAgIGVsc2UgaWYocGxheWVyLnN0YWlyID4gNjUpIHNwZWVkID0gMTA7XHJcbiAgICBlbHNlIGlmKHBsYXllci5zdGFpciA+IDUwKSBzcGVlZCA9IDEwO1xyXG4gICAgZWxzZSBpZihwbGF5ZXIuc3RhaXIgPiAzNSkgc3BlZWQgPSA5O1xyXG4gICAgZWxzZSBpZihwbGF5ZXIuc3RhaXIgPiAyMCkgc3BlZWQgPSA4O1xyXG4gICAgZm9yKGxldCBpID0gMCA7IGkgPCAxMCA7IGkrKyl7XHJcbiAgICAgICAgaWYoIEJsb2NrQXJyYXlbaV0ueSA8PSAzMCApe1xyXG4gICAgICAgICAgICBCbG9ja0FycmF5W2ldLnkgPSBjYW52YXNCLmhlaWdodCArIChNYXRoLnJhbmRvbSgpKjEwKzEpKihNYXRoLnJhbmRvbSgpKjUwKzUwKSArIDEwMDtcclxuICAgICAgICAgICAgQmxvY2tBcnJheVtpXS54ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhc0Iud2lkdGgtMTAwO1xyXG4gICAgICAgICAgICAvLy8gQXZvaWQgT3ZlcmxhcHBpbmdcclxuICAgICAgICAgICAgd2hpbGUoMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQmxvY2tBcnJheVtpXS55ID0gY2FudmFzQi5oZWlnaHQgKyAoTWF0aC5yYW5kb20oKSoxMCsxKSooTWF0aC5yYW5kb20oKSo1MCs1MCkgKyAxMDA7XHJcbiAgICAgICAgICAgICAgICBCbG9ja0FycmF5W2ldLnggPSBNYXRoLnJhbmRvbSgpICogY2FudmFzQi53aWR0aC0xMDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3ZlcmxhcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMCA7IGogPCAxMCA7IGorKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiggaT09aiApIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCAoTWF0aC5hYnMoQmxvY2tBcnJheVtpXS54LUJsb2NrQXJyYXlbal0ueCk8PTIwMCkgJiYgKE1hdGguYWJzKEJsb2NrQXJyYXlbaV0ueS1CbG9ja0FycmF5W2pdLnkpPD02MCkgIClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwib3ZlcmxhcCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cob3ZlcmxhcCk7XHJcbiAgICAgICAgICAgICAgICBpZighb3ZlcmxhcCkgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIH1cdFxyXG4gICAgfVxyXG4gICAgLy99XHJcbn1cclxuZnVuY3Rpb24gcnVuKCkge1xyXG4gICAgdXBkYXRlKChEYXRlLm5vdygpIC0gdGltZSkgLyAxMDAwKTtcclxuICAgIHJlbmRlcigpO1xyXG4gICAgdGltZSA9IERhdGUubm93KCk7XHJcbn1cclxuXHJcbnZhciB0aW1lID0gRGF0ZS5ub3coKTtcclxuc2V0SW50ZXJ2YWwocnVuLCAzNSk7XHJcblxyXG5sZXQgQmxvY2tBcnJheSA9IFtdO1xyXG5CbG9ja0FycmF5WzBdID0gbmV3IEJsb2NrT2JqKDE1MCw2MDApO1xyXG5mb3IoIGxldCBpID0gMSA7IGkgPCAxMCA7IGkrKyl7XHJcbiAgICBsZXQgcjtcclxuICAgIGlmIChjYW52YXNCIT1udWxsICYmIGNhbnZhc0Iud2lkdGghPW51bGwpXHJcbiAgICAgICAgIHIgPSBNYXRoLnJhbmRvbSgpICogY2FudmFzQi53aWR0aC0xNTA7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgciA9IE1hdGgucmFuZG9tKCkgKiAzODA7XHJcbiAgICAvL2xldCByID0gTWF0aC5yYW5kb20oKSAqIDM4MDtcclxuICAgIGxldCBkZSA9IChNYXRoLnJhbmRvbSgpICogMjAraSo0KSo0MCA7XHJcbiAgICAvLy8gQXZvaWQgT3ZlcmxhcHBpbmdcclxuICAgIHdoaWxlKDEpXHJcbiAgICB7ICAgIFxyXG4gICAgaWYgKGNhbnZhc0IhPW51bGwgJiYgY2FudmFzQi53aWR0aCE9bnVsbClcclxuICAgICAgICByID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhc0Iud2lkdGgtMTUwO1xyXG4gICAgZWxzZVxyXG4gICAgICAgciA9IE1hdGgucmFuZG9tKCkgKiAzODA7XHJcbiAgICAgICAgIC8vID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhc0Iud2lkdGgtMTAwO1xyXG4gICAgICAgIC8vciA9IE1hdGgucmFuZG9tKCkgKiAzODA7XHJcbiAgICAgICAgZGUgPSAoTWF0aC5yYW5kb20oKSAqIDIwK2kqNCkqNDAgO1xyXG4gICAgICAgIGxldCBvdmVybGFwID0gZmFsc2U7XHJcbiAgICAgICAgZm9yKGxldCBqID0gMCA7IGogPCBpIDsgaisrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoaT09aikgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmKCAoTWF0aC5hYnMoci1CbG9ja0FycmF5W2pdLngpPD0yMDApICYmIChNYXRoLmFicyhkZS1CbG9ja0FycmF5W2pdLnkpPD02MCkgIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgb3ZlcmxhcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwib3ZlcmxhcCFcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZighb3ZlcmxhcCkgYnJlYWs7XHJcbiAgICB9XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICBpZihpID09IDMgfHwgaSA9PSA5ICkgQmxvY2tBcnJheVtpXSA9IG5ldyBEX0Jsb2NrT2JqKHIsZGUpO1xyXG4gICAgZWxzZSBpZiAoIGkgPT0gMiB8fCBpID09IDcpIEJsb2NrQXJyYXlbaV0gPSBuZXcgQmxvY2tPYmoocixkZSk7XHJcbiAgICBlbHNlIGlmICggaSA9PSA1ICkgQmxvY2tBcnJheVtpXSA9IG5ldyBKX0Jsb2NrT2JqKHIsZGUpO1xyXG4gICAgZWxzZSBCbG9ja0FycmF5W2ldID0gbmV3IEJsb2NrT2JqKHIsZGUpO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJQbGF5ZXJPYmoiLCJjb25zdHJ1Y3RvciIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJzcGVlZCIsImxpZmUiLCJyZWNvbmRGbG9vciIsInN0YXRlIiwiY29sb3IiLCJCbG9ja09iaiIsImEiLCJiIiwibW9kIiwiSl9CbG9ja09iaiIsIkRfQmxvY2tPYmoiLCJzdGF0dXNTdGFydCIsInN0YXR1c0VuZCIsInN0YW5kSG9sZCIsImxlZnRNb3ZlQWN0aW9uIiwicmlnaHRNb3ZlQWN0aW9uIiwiYmdwaWMiLCJJbWFnZSIsInNyYyIsInRvcHBpYyIsInN0YW5kIiwiYmxvY2tQaWMiLCJqX2Jsb2NrUGljIiwiZF9ibG9ja1BpYyIsImxlZnRwaWMiLCJyaWdodHBpYyIsImdhbWVPdmVyUGljIiwiY2FudmFzQiIsImN0eEIiLCJjYW52YXNNIiwiY3R4TSIsImdhbWVTdGF0dXMiLCJlbmRTdGF0dXMiLCJwbGF5ZXIiLCJrZXlzRG93biIsInVwIiwidXAyIiwiZG93biIsImRvd24yIiwibV95IiwibV95MiIsImZsYWczIiwibGVmdE1vdmUiLCJyaWdodE1vdmUiLCJyIiwibXMiLCJyZW5kZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwia2V5Q29kZSIsInRvdWNoZXMiLCJyZXN0YXJ0QnV0dG9uIiwicmVzdGFydEdhbWUiLCJjb25zb2xlIiwibG9nIiwic3R5bGUiLCJkaXNwbGF5IiwiZHJhd0ltYWdlIiwiaSIsIkJsb2NrQXJyYXkiLCJzcGljIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJjbGVhclJlY3QiLCJncmQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsImZvbnQiLCJmaWxsVGV4dCIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlVGV4dCIsInN0cm9rZVJlY3QiLCJNYXRoIiwiZmxvb3IiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwidXBkYXRlIiwiYWxlcnQiLCJ1bmRlZmluZWQiLCJzdGFpciIsInJhbmRvbSIsIm92ZXJsYXAiLCJqIiwiYWJzIiwicnVuIiwiRGF0ZSIsIm5vdyIsInRpbWUiLCJzZXRJbnRlcnZhbCIsImRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///879\n')},335:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM1LmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnMtc2hhZnQtbm9kZS8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///335\n")}};__webpack_modules__[879]();var __webpack_exports__={};__webpack_modules__[335]()})();